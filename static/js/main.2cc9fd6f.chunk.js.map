{"version":3,"sources":["api/WeatherInfor.js","components/ForeCast.js","App.js","index.js"],"names":["getData","url","Promise","resolve","reject","result","fetch","mode","then","response","json","console","log","cod","message","wind","visibility","main","weather","name","sys","ForeCast","props","data","handleMesureChange","onChange","check","className","country","alt","src","icon","Math","round","temp","type","style","display","description","feels_like","humidity","speed","App","useState","foreCast","setForeCast","query","setQuery","fahrenheit","setFahrenheit","getDataByUnit","dt","catch","error","alert","onSubmit","event","preventDefault","placeholder","value","e","target","checked","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PA+BeA,MA/Bf,SAAiBC,GACb,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzB,IAAIC,EAAS,GACbC,MAAML,EAAK,CAAEM,KAAM,SAGdC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACFE,QAAQC,IAAIH,GACRA,GAA6B,QAAjBA,EAASI,KACrBT,EAAOK,EAASK,SAHN,qBAK8CL,GAApDM,EALM,EAKNA,KAAMC,EALA,EAKAA,WAAYC,EALZ,EAKYA,KAAMC,EALlB,EAKkBA,QAASC,EAL3B,EAK2BA,KAAMC,EALjC,EAKiCA,IAG/Cf,EAAS,CAAEY,OAAMC,UAASH,OAAMC,aAAYG,OAAMC,OAClDT,QAAQC,IAAI,WACZT,EAAQE,UC6BTgB,G,MApCE,SAAAC,GAAU,IAAD,iBACsCA,EAAMC,MAA1DN,EADc,EACdA,KAAMC,EADQ,EACRA,QAASH,EADD,EACCA,KAAMC,EADP,EACOA,WAAYG,EADnB,EACmBA,KAAMC,EADzB,EACyBA,IACzCI,EAAqBF,EAAMG,SAC3BC,EAAQJ,EAAMI,MAIpB,OACI,sBAAKC,UAAU,YAAf,UACI,+BAAKR,EAAL,KAAaC,EAAIQ,WACjB,sBAAKD,UAAU,iBAAf,UACI,qBAAKE,IAAI,OAAOC,IAAG,2CAAsCZ,EAAQ,GAAGa,KAAjD,aACnB,qBAAIJ,UAAU,OAAd,UAAsBK,KAAKC,MAAMhB,EAAKiB,MAAM,8BAAMR,EAAQ,QAAO,aACjE,sBAAKC,UAAU,aAAf,UACI,wBAAOA,UAAU,SAAjB,UACI,uBAAOQ,KAAK,WAAWV,SAAUD,IACjC,sBAAMG,UAAU,oBAEpB,oBAAIS,MAAO,CAAEC,QAAS,UAAtB,0BAGR,6BAAKnB,EAAQ,GAAGoB,cAChB,gCACI,4CAAeN,KAAKC,MAAMhB,EAAKsB,YAA/B,IAA6Cb,EAAQ,QAAO,WAC5D,0CAAaT,EAAKuB,SAAlB,OACA,4CAAexB,EAAf,YACA,sCAASD,EAAK0B,MAAd,kBCqBDC,MAnDf,WAAgB,IAAD,EACmBC,mBAAS,MAD5B,mBACNC,EADM,KACIC,EADJ,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGuBJ,oBAAS,GAHhC,mBAGNK,EAHM,KAGMC,EAHN,KAUb,SAASC,EAAcxB,GACrB1B,EAAQ,oDAAD,OAAqD8C,EAArD,yDAA2GpB,EAAQ,WAAa,WACpIlB,MAAK,SAAA2C,GACJN,EAAYM,GACZxC,QAAQC,IAAI,OAASuC,MAEtBC,OAAM,SAAAC,GACLC,MAAM,OAASD,MAgBrB,OACE,sBAAK1B,UAAU,MAAf,UACE,yBAAQA,UAAU,SAAlB,UACE,oBAAIA,UAAU,QAAd,8BACA,uBAAMA,UAAU,OAAO4B,SAhB7B,SAAsBC,GACpBA,EAAMC,iBACNP,EAAcF,IAcV,UACE,uBAAOb,KAAK,OAAOuB,YAAY,iBAAiBC,MAAOb,EAAOrB,SAhCtE,SAA2BmC,GACzBb,EAASa,EAAEC,OAAOF,UAgCZ,wBAAQxB,KAAK,SAAb,0BAGJ,+BAEIS,GAAY,cAAC,EAAD,CAAUlB,MAAOsB,EAAYvB,SAlBjD,SAA4BmC,GAC1BjD,QAAQC,IAAIoC,GACZC,EAAcW,EAAEC,OAAOC,SACvBnD,QAAQC,IAAIoC,GACZE,EAAcU,EAAEC,OAAOC,UAcsDvC,KAAMqB,UC7CvFmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2cc9fd6f.chunk.js","sourcesContent":["function getData(url) {\r\n    return new Promise((resolve, reject) => {\r\n        let result = {};\r\n        fetch(url, { mode: 'cors' })\r\n            // fetch('https://api.openweathermap.org/data/2.5/onecall?lat=15.11667&lon=108.800003&appid=993b45ee4b3939f7e01752c938c35d0b&units=metric', { mode: 'cors' })\r\n            // fetch('https://api.openweathermap.org/data/2.5/onecall?lat=15.0&lon=108.666672&appid=993b45ee4b3939f7e01752c938c35d0b&units=metric', { mode: 'cors' })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                console.log(response);\r\n                if (response && response.cod === '404') {\r\n                    reject(response.message);\r\n                }\r\n                const { wind, visibility, main, weather, name, sys } = { ...response };\r\n                // const { temp, humidity, visibility, feels_like, weather } = { ...current }\r\n                // console.log({ main, weather, wind, visibility, sys });\r\n                result = { main, weather, wind, visibility, name, sys };\r\n                console.log(\"Ok fine\");\r\n                resolve(result);\r\n            })\r\n        // .catch(error => {\r\n        //     console.log(\"ERROR in WeatherInfor\" + error);\r\n        //     reject(error);\r\n        // });\r\n    })\r\n    // console.log(\"hshdhasdfafd\");\r\n    // return result;\r\n}\r\n\r\n\r\n\r\n\r\nexport default getData;","import React from 'react';\r\nimport './ForeCast.css';\r\n\r\n// function convertCtoF(value) {\r\n//     return Math.round((value * 1.8) + 32);\r\n// }\r\n// function convertFtoC(value) {\r\n//     return Math.round((value - 32) * 5 / 9);\r\n// }\r\n\r\nconst ForeCast = props => {\r\n    const { main, weather, wind, visibility, name, sys } = { ...props.data };\r\n    const handleMesureChange = props.onChange;\r\n    const check = props.check;\r\n    // let unix = 1604875601;\r\n    // let date = new Date(unix * 1000);\r\n    // console.log(date)\r\n    return (\r\n        <div className='main-card'>\r\n            <h1>{name}, {sys.country}</h1>\r\n            <div className='temp-container'>\r\n                <img alt='icon' src={`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`} />\r\n                <h1 className='temp'>{Math.round(main.temp)}<sup>{check ? '°F' : '°C'}</sup></h1>\r\n                <div className='switch-btn'>\r\n                    <label className=\"switch\">\r\n                        <input type=\"checkbox\" onChange={handleMesureChange} />\r\n                        <span className=\"slider round\"></span>\r\n                    </label>\r\n                    <h4 style={{ display: 'inline' }}> °F</h4>\r\n                </div>\r\n            </div>\r\n            <h2>{weather[0].description}</h2>\r\n            <div>\r\n                <p>Feels like {Math.round(main.feels_like)} {check ? '°F' : '°C'}</p>\r\n                <p>Humidity {main.humidity}%</p>\r\n                <p>Visibility {visibility} meter</p>\r\n                <p>Wind {wind.speed} m/s</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nForeCast.propTypes = {\r\n\r\n};\r\n\r\nexport default ForeCast;","import './App.css';\nimport getData from './api/WeatherInfor';\nimport { useState } from 'react';\nimport ForeCast from './components/ForeCast';\n// import background from './assets/images/background.jpg';\n\nfunction App() {\n  const [foreCast, setForeCast] = useState(null);\n  const [query, setQuery] = useState('');\n  const [fahrenheit, setFahrenheit] = useState(false);\n  // const [error, setError] = useState(false);\n\n  function handleQueryChange(e) {\n    setQuery(e.target.value);\n  }\n\n  function getDataByUnit(check) {\n    getData(`http://api.openweathermap.org/data/2.5/weather?q=${query}&appid=993b45ee4b3939f7e01752c938c35d0b&units=${check ? 'imperial' : 'metric'}`)\n      .then(dt => {\n        setForeCast(dt);\n        console.log(\"DT: \" + dt);\n      })\n      .catch(error => {\n        alert(\"ER: \" + error);\n      });\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    getDataByUnit(fahrenheit);\n  }\n\n  function handleMesureChange(e) {\n    console.log(fahrenheit);\n    setFahrenheit(e.target.checked);\n    console.log(fahrenheit);\n    getDataByUnit(e.target.checked);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className='header'>\n        <h1 className='brand'>Weather Forecast</h1>\n        <form className='form' onSubmit={handleSubmit}>\n          <input type='text' placeholder='Enter the city' value={query} onChange={handleQueryChange}></input>\n          <button type='submit'>Search</button>\n        </form>\n      </header>\n      <main>\n        {\n          foreCast && <ForeCast check={fahrenheit} onChange={handleMesureChange} data={foreCast} />\n        }\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}